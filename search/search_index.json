{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"apiminio","text":"<p>apiminio is a Python package that provides a ready-to-use REST API for interacting with MinIO S3 storage, built with FastAPI and the MinIO Python client. It enables seamless file uploads, downloads, and bucket management via HTTP interface ideal for integrating MinIO S3 into your applications with minimal setup.</p> <p>Additionally, wrapped AI agent tools via MCP are now supported to provide an interface for LLMs to S3 bucket objects \u2728</p> <p>\ud83d\udd1c Customization of your own endpoints!</p> <ul> <li>Github repository https://github.com/raederan/apiminio/</li> <li>Documentation https://docs.apimin.io/</li> </ul>"},{"location":"#table-of-contents","title":"\ud83d\udcc4 Table of Contents","text":"<ul> <li>\ud83d\udca1 Project</li> <li>\ud83d\udea6 Prerequisites</li> <li>\ud83d\ude80 Install</li> <li>\ud83d\udca5 Usage \ud83c\udf30\ud83d\udc3f\ufe0f</li> <li>\u2714\ufe0f Minimal Example</li> <li>\ud83d\udc0d Run the Server</li> <li>Support</li> <li>\ud83e\udd50 Kubernetes</li> <li>\ud83d\udede Commands</li> <li>\ud83d\udcdc License</li> <li>\ud83e\udda5 Authors</li> </ul>"},{"location":"#project","title":"\ud83d\udca1 Project","text":"<ol> <li>[ ] At 1st basic implementation of apiminio, handling buckets and files will be focused.</li> <li>[x] Create buckets</li> <li>[x] List buckets</li> <li>[x] Delete buckets</li> <li>[x] Upload files</li> <li>[ ] Download files</li> <li>[x] Delete files</li> <li>[x] MCP (Model Context Protocol) wrapped endpoints to enable usage for AI agent tools</li> <li>[ ] Customization of additional endpoints and MCP tools</li> <li>[ ] Security will be at the 2nd development stage using authenticated sessions by credentials as well as tokens.</li> <li>[ ] Certificate handling and TLS will be the 3rd level.</li> </ol>"},{"location":"#prerequisites","title":"\ud83d\udea6 Prerequisites","text":"<ul> <li>minio endpoint, access key, and secret key</li> <li>Recommended Dev Setup</li> <li>Kubernetes</li> <li>kubectl</li> <li>Skaffold</li> </ul>"},{"location":"#install","title":"\ud83d\ude80 Install","text":"<p>Recommended</p> <pre><code>uv add apiminio\n</code></pre> <p>or use pip</p> <pre><code>pip install apiminio\n</code></pre>"},{"location":"#usage","title":"\ud83d\udca5 Usage \ud83c\udf30\ud83d\udc3f\ufe0f","text":"<p>Create your python file, e.g., <code>apiminio_server.py</code>, configure your S3 server and run it. You can use the following examples as a starting point.</p>"},{"location":"#minimal-example","title":"\u2714\ufe0f Minimal Example","text":"<pre><code>from apiminio import Apiminio, MinioConfig\nfrom pydantic import SecretStr\n\napp = Apiminio(\n    minio_config=MinioConfig(\n        endpoint=\"localhost:9000\",\n        access_key=\"minioadmin\",\n        secret_key=SecretStr(\"minioadmin\"),\n        secure=False\n    )\n)\n\nif __name__ == \"__main__\":\n    # Serve FastAPI using Uvicorn\n    import uvicorn\n\n    uvicorn.run(\"minimal:app\", host=\"0.0.0.0\", port=8000, reload=True)\n</code></pre>"},{"location":"#run-the-server","title":"\ud83d\udc0d Run the Server","text":"<p>Either just run <code>python apiminio_server.py</code> or use <code>fastapi run apiminio_server.py</code>.</p> <p>You can use flags and parmeters inherited from <code>FastAPI</code> to deploy your <code>apiminio</code> server via <code>Uvicorn</code> \ud83e\udd84\ud83d\udc0d Open apiminio docs and explore your new API on http://localhost:8000 \ud83d\udd2c</p>"},{"location":"#support","title":"Support","text":"<p>Thats it! Please leave me a \u2b50 if you like the projekt \ud83e\udd17 More features coming soon!</p>"},{"location":"#kubernetes","title":"\ud83e\udd50 Kubernetes","text":"<p>This repository has a skaffold.yaml configuration with a working minio as well as the apiminio service to bootstrap the development \ud83d\ude0e\ud83d\ude4c</p>"},{"location":"#commands","title":"\ud83d\udede Commands","text":"<p>To clone this repository, run:</p> <pre><code>git clone https://github.com/raederan/apiminio.git\n</code></pre> <p>To instantly provide minio with apiminio, e.g., run:</p> <pre><code>skaffold dev --no-prune=false --cache-artifacts=false --default-repo localhost:32000/apiminio --port-forward\n</code></pre>"},{"location":"#license","title":"\ud83d\udcdc License","text":"<p>This project is licensed under the terms of the Apache License 2.0.</p> <p>The banner file is based on an original png generated using Microsoft Copilot and subsequently modified further as svg by the initial author of this repository.</p>"},{"location":"#authors","title":"\ud83e\udda5 Authors","text":"<p>Andreas R\u00e4der</p>"},{"location":"modules/","title":"Modules","text":"<p>Entrypoint of apiminio, refactored as Apiminio class.</p>"},{"location":"modules/#apiminio.main.Apiminio","title":"<code>Apiminio</code>","text":"<p>               Bases: <code>FastAPI</code></p> <p>Apiminio is a REST interface inheriting FastAPI and providing Minio functionality.</p> Source code in <code>src/apiminio/main.py</code> <pre><code>class Apiminio(FastAPI):\n    \"\"\"\n    Apiminio is a REST interface inheriting FastAPI and providing Minio functionality.\n    \"\"\"\n\n    def __init__(self, minio_config: MinioConfig, mcp_config: Optional[McpConfig] = None) -&gt; None:\n        if mcp_config is None:\n            self.mcp_config = McpConfig(enable_mcp=False)\n        else:\n            self.mcp_config = mcp_config\n        super().__init__(description=\"apiminio\")\n        self.minio = Minio(\n            endpoint=minio_config.endpoint,\n            access_key=minio_config.access_key,\n            secret_key=minio_config.secret_key.get_secret_value(),\n            secure=minio_config.secure,\n        )\n        self.register_routes()\n        self.mount_mcp()  # Conditonally mount MCP\n\n    def mount_mcp(self) -&gt; None:\n        \"\"\"Mount MCP support if enabled.\"\"\"\n        if self.mcp_config.enable_mcp:\n            self.mcp = FastApiMCP(self)\n            try:\n                if self.mcp_config.transport == \"http\":\n                    self.mcp.mount_http()\n                elif self.mcp_config.transport == \"sse\":\n                    self.mcp.mount_sse()\n                else:\n                    print(f\"Unsupported transport type: {self.mcp_config.transport}\")\n            except Exception as e:\n                print(e)\n        else:\n            # If MCP is not enabled, do not mount it\n            pass\n\n    def register_routes(self) -&gt; None:\n        \"\"\"Register all routes for the Apiminio class.\"\"\"\n\n        # Default\n        tag_apiminio = \"apiminio\"\n        self.get(\"/\", tags=[tag_apiminio])(self.read_root)\n        self.get(\"/healthy\", tags=[tag_apiminio])(self.health_check)\n\n        # Bucket operations\n        tag_bucket_operations = \"apiminio bucket operations\"\n        self.get(\"/bucketnames\", tags=[tag_bucket_operations])(self.list_buckets)\n        self.post(\"/bucket\", tags=[tag_bucket_operations])(self.create_bucket)\n        self.delete(\"/bucket\", tags=[tag_bucket_operations])(self.delete_bucket)\n\n        # File operations\n        tag_file_operations = \"apiminio file operations\"\n        self.get(\"/filenames\", tags=[tag_file_operations])(self.list_filenames)\n        self.post(\"/file\", tags=[tag_file_operations])(self.upload_file)\n        self.delete(\"/file\", tags=[tag_file_operations])(self.delete_file)\n\n    async def read_root(self) -&gt; dict:\n        \"\"\"Root endpoint for apiminio.\"\"\"\n        return {\"status\": \"ok\", \"message\": \"yo apiminio!\"}\n\n    async def health_check(self) -&gt; dict:\n        \"\"\"Health check endpoint for minio connection.\"\"\"\n        try:\n            await asyncio.wait_for(asyncio.to_thread(self.minio.list_buckets), timeout=3)\n        except asyncio.TimeoutError:\n            return {\"alive\": False}\n        else:\n            return {\"alive\": True}\n\n    async def list_buckets(self) -&gt; dict:\n        \"\"\"List all bucket names.\"\"\"\n        try:\n            buckets = self.minio.list_buckets()\n            if buckets is None:\n                return {\"buckets\": []}\n            else:\n                bucket_names = [bucket.name for bucket in buckets]\n                return {\"buckets\": bucket_names}\n        except S3Error as e:\n            raise HTTPException(status_code=500, detail=str(e)) from e\n\n    async def create_bucket(self, request: BucketRequest) -&gt; dict:\n        \"\"\"Create a new bucket.\"\"\"\n        bucket_name = request.bucket_name\n        try:\n            if not self.minio.bucket_exists(bucket_name):\n                self.minio.make_bucket(bucket_name)\n                return {\"message\": f\"Bucket '{bucket_name}' created successfully.\"}\n            else:\n                raise HTTPException(status_code=404, detail=f\"Bucket '{bucket_name}' already exists.\")\n        except S3Error as e:\n            raise HTTPException(status_code=500, detail=str(e)) from e\n\n    async def delete_bucket(self, request: BucketRequest) -&gt; dict:\n        \"\"\"Delete an existing bucket.\"\"\"\n        bucket_name = request.bucket_name\n        try:\n            if self.minio.bucket_exists(bucket_name):\n                self.minio.remove_bucket(bucket_name)\n                return {\"message\": f\"Bucket '{bucket_name}' deleted successfully.\"}\n            else:\n                raise HTTPException(status_code=404, detail=f\"Bucket '{bucket_name}' does not exist.\")\n        except S3Error as e:\n            raise HTTPException(status_code=500, detail=str(e)) from e\n\n    async def list_filenames(self, bucket_name: str) -&gt; dict:\n        \"\"\"List all files in a bucket.\"\"\"\n        try:\n            if self.minio.bucket_exists(bucket_name):\n                objects = self.minio.list_objects(bucket_name)\n                return {\"files\": [obj.object_name for obj in objects]}\n            else:\n                raise HTTPException(status_code=404, detail=f\"Bucket '{bucket_name}' does not exist.\")\n        except S3Error as e:\n            raise HTTPException(status_code=500, detail=str(e)) from e\n\n    async def upload_file(self, bucket_name: str = Form(...), file: Optional[UploadFile] = None) -&gt; dict:\n        \"\"\"Upload a file to a specified bucket.\"\"\"\n        if file is None:\n            file = File(...)\n        try:\n            if self.minio.bucket_exists(bucket_name):\n                file_bytes = await file.read()\n                file_stream = BytesIO(file_bytes)\n                self.minio.put_object(\n                    bucket_name=bucket_name, object_name=file.filename, data=file_stream, length=len(file_bytes)\n                )\n                return {\"filename\": file.filename}\n            else:\n                return {\"message\": f\"Bucket '{bucket_name}' does not exist.\"}\n        except Exception as e:\n            raise HTTPException(status_code=500, detail=str(e)) from e\n\n    async def delete_file(self, bucket_name: str = Form(...), file_name: str = Form(...)) -&gt; dict:\n        \"\"\"Delete a file from a specified bucket, checking if file exists first.\"\"\"\n        try:\n            if not self.minio.bucket_exists(bucket_name):\n                raise HTTPException(status_code=404, detail=f\"Bucket '{bucket_name}' does not exist.\")\n\n            # Check if file exists in bucket\n            objects = self.minio.list_objects(bucket_name, prefix=file_name, recursive=False)\n            file_exists = any(obj.object_name == file_name for obj in objects)\n            if not file_exists:\n                raise HTTPException(\n                    status_code=404, detail=f\"File '{file_name}' does not exist in bucket '{bucket_name}'.\"\n                )\n            else:\n                self.minio.remove_object(bucket_name, file_name)\n                return {\"message\": f\"File '{file_name}' deleted successfully from bucket '{bucket_name}'.\"}\n        except S3Error as e:\n            raise HTTPException(status_code=500, detail=str(e)) from e\n</code></pre>"},{"location":"modules/#apiminio.main.Apiminio.create_bucket","title":"<code>create_bucket(request)</code>  <code>async</code>","text":"<p>Create a new bucket.</p> Source code in <code>src/apiminio/main.py</code> <pre><code>async def create_bucket(self, request: BucketRequest) -&gt; dict:\n    \"\"\"Create a new bucket.\"\"\"\n    bucket_name = request.bucket_name\n    try:\n        if not self.minio.bucket_exists(bucket_name):\n            self.minio.make_bucket(bucket_name)\n            return {\"message\": f\"Bucket '{bucket_name}' created successfully.\"}\n        else:\n            raise HTTPException(status_code=404, detail=f\"Bucket '{bucket_name}' already exists.\")\n    except S3Error as e:\n        raise HTTPException(status_code=500, detail=str(e)) from e\n</code></pre>"},{"location":"modules/#apiminio.main.Apiminio.delete_bucket","title":"<code>delete_bucket(request)</code>  <code>async</code>","text":"<p>Delete an existing bucket.</p> Source code in <code>src/apiminio/main.py</code> <pre><code>async def delete_bucket(self, request: BucketRequest) -&gt; dict:\n    \"\"\"Delete an existing bucket.\"\"\"\n    bucket_name = request.bucket_name\n    try:\n        if self.minio.bucket_exists(bucket_name):\n            self.minio.remove_bucket(bucket_name)\n            return {\"message\": f\"Bucket '{bucket_name}' deleted successfully.\"}\n        else:\n            raise HTTPException(status_code=404, detail=f\"Bucket '{bucket_name}' does not exist.\")\n    except S3Error as e:\n        raise HTTPException(status_code=500, detail=str(e)) from e\n</code></pre>"},{"location":"modules/#apiminio.main.Apiminio.delete_file","title":"<code>delete_file(bucket_name=Form(...), file_name=Form(...))</code>  <code>async</code>","text":"<p>Delete a file from a specified bucket, checking if file exists first.</p> Source code in <code>src/apiminio/main.py</code> <pre><code>async def delete_file(self, bucket_name: str = Form(...), file_name: str = Form(...)) -&gt; dict:\n    \"\"\"Delete a file from a specified bucket, checking if file exists first.\"\"\"\n    try:\n        if not self.minio.bucket_exists(bucket_name):\n            raise HTTPException(status_code=404, detail=f\"Bucket '{bucket_name}' does not exist.\")\n\n        # Check if file exists in bucket\n        objects = self.minio.list_objects(bucket_name, prefix=file_name, recursive=False)\n        file_exists = any(obj.object_name == file_name for obj in objects)\n        if not file_exists:\n            raise HTTPException(\n                status_code=404, detail=f\"File '{file_name}' does not exist in bucket '{bucket_name}'.\"\n            )\n        else:\n            self.minio.remove_object(bucket_name, file_name)\n            return {\"message\": f\"File '{file_name}' deleted successfully from bucket '{bucket_name}'.\"}\n    except S3Error as e:\n        raise HTTPException(status_code=500, detail=str(e)) from e\n</code></pre>"},{"location":"modules/#apiminio.main.Apiminio.health_check","title":"<code>health_check()</code>  <code>async</code>","text":"<p>Health check endpoint for minio connection.</p> Source code in <code>src/apiminio/main.py</code> <pre><code>async def health_check(self) -&gt; dict:\n    \"\"\"Health check endpoint for minio connection.\"\"\"\n    try:\n        await asyncio.wait_for(asyncio.to_thread(self.minio.list_buckets), timeout=3)\n    except asyncio.TimeoutError:\n        return {\"alive\": False}\n    else:\n        return {\"alive\": True}\n</code></pre>"},{"location":"modules/#apiminio.main.Apiminio.list_buckets","title":"<code>list_buckets()</code>  <code>async</code>","text":"<p>List all bucket names.</p> Source code in <code>src/apiminio/main.py</code> <pre><code>async def list_buckets(self) -&gt; dict:\n    \"\"\"List all bucket names.\"\"\"\n    try:\n        buckets = self.minio.list_buckets()\n        if buckets is None:\n            return {\"buckets\": []}\n        else:\n            bucket_names = [bucket.name for bucket in buckets]\n            return {\"buckets\": bucket_names}\n    except S3Error as e:\n        raise HTTPException(status_code=500, detail=str(e)) from e\n</code></pre>"},{"location":"modules/#apiminio.main.Apiminio.list_filenames","title":"<code>list_filenames(bucket_name)</code>  <code>async</code>","text":"<p>List all files in a bucket.</p> Source code in <code>src/apiminio/main.py</code> <pre><code>async def list_filenames(self, bucket_name: str) -&gt; dict:\n    \"\"\"List all files in a bucket.\"\"\"\n    try:\n        if self.minio.bucket_exists(bucket_name):\n            objects = self.minio.list_objects(bucket_name)\n            return {\"files\": [obj.object_name for obj in objects]}\n        else:\n            raise HTTPException(status_code=404, detail=f\"Bucket '{bucket_name}' does not exist.\")\n    except S3Error as e:\n        raise HTTPException(status_code=500, detail=str(e)) from e\n</code></pre>"},{"location":"modules/#apiminio.main.Apiminio.mount_mcp","title":"<code>mount_mcp()</code>","text":"<p>Mount MCP support if enabled.</p> Source code in <code>src/apiminio/main.py</code> <pre><code>def mount_mcp(self) -&gt; None:\n    \"\"\"Mount MCP support if enabled.\"\"\"\n    if self.mcp_config.enable_mcp:\n        self.mcp = FastApiMCP(self)\n        try:\n            if self.mcp_config.transport == \"http\":\n                self.mcp.mount_http()\n            elif self.mcp_config.transport == \"sse\":\n                self.mcp.mount_sse()\n            else:\n                print(f\"Unsupported transport type: {self.mcp_config.transport}\")\n        except Exception as e:\n            print(e)\n    else:\n        # If MCP is not enabled, do not mount it\n        pass\n</code></pre>"},{"location":"modules/#apiminio.main.Apiminio.read_root","title":"<code>read_root()</code>  <code>async</code>","text":"<p>Root endpoint for apiminio.</p> Source code in <code>src/apiminio/main.py</code> <pre><code>async def read_root(self) -&gt; dict:\n    \"\"\"Root endpoint for apiminio.\"\"\"\n    return {\"status\": \"ok\", \"message\": \"yo apiminio!\"}\n</code></pre>"},{"location":"modules/#apiminio.main.Apiminio.register_routes","title":"<code>register_routes()</code>","text":"<p>Register all routes for the Apiminio class.</p> Source code in <code>src/apiminio/main.py</code> <pre><code>def register_routes(self) -&gt; None:\n    \"\"\"Register all routes for the Apiminio class.\"\"\"\n\n    # Default\n    tag_apiminio = \"apiminio\"\n    self.get(\"/\", tags=[tag_apiminio])(self.read_root)\n    self.get(\"/healthy\", tags=[tag_apiminio])(self.health_check)\n\n    # Bucket operations\n    tag_bucket_operations = \"apiminio bucket operations\"\n    self.get(\"/bucketnames\", tags=[tag_bucket_operations])(self.list_buckets)\n    self.post(\"/bucket\", tags=[tag_bucket_operations])(self.create_bucket)\n    self.delete(\"/bucket\", tags=[tag_bucket_operations])(self.delete_bucket)\n\n    # File operations\n    tag_file_operations = \"apiminio file operations\"\n    self.get(\"/filenames\", tags=[tag_file_operations])(self.list_filenames)\n    self.post(\"/file\", tags=[tag_file_operations])(self.upload_file)\n    self.delete(\"/file\", tags=[tag_file_operations])(self.delete_file)\n</code></pre>"},{"location":"modules/#apiminio.main.Apiminio.upload_file","title":"<code>upload_file(bucket_name=Form(...), file=None)</code>  <code>async</code>","text":"<p>Upload a file to a specified bucket.</p> Source code in <code>src/apiminio/main.py</code> <pre><code>async def upload_file(self, bucket_name: str = Form(...), file: Optional[UploadFile] = None) -&gt; dict:\n    \"\"\"Upload a file to a specified bucket.\"\"\"\n    if file is None:\n        file = File(...)\n    try:\n        if self.minio.bucket_exists(bucket_name):\n            file_bytes = await file.read()\n            file_stream = BytesIO(file_bytes)\n            self.minio.put_object(\n                bucket_name=bucket_name, object_name=file.filename, data=file_stream, length=len(file_bytes)\n            )\n            return {\"filename\": file.filename}\n        else:\n            return {\"message\": f\"Bucket '{bucket_name}' does not exist.\"}\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=str(e)) from e\n</code></pre>"},{"location":"modules/#apiminio.main.BucketRequest","title":"<code>BucketRequest</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Request model for bucket operations.</p> Source code in <code>src/apiminio/main.py</code> <pre><code>class BucketRequest(BaseModel):\n    \"\"\"Request model for bucket operations.\"\"\"\n\n    bucket_name: str\n</code></pre>"},{"location":"modules/#apiminio.main.McpConfig","title":"<code>McpConfig</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>MCP transport protocol configuration for Apiminio.</p> Source code in <code>src/apiminio/main.py</code> <pre><code>class McpConfig(BaseModel):\n    \"\"\"MCP transport protocol configuration for Apiminio.\"\"\"\n\n    # Enable MCP support\n    enable_mcp: bool = param.Boolean(default=True)\n    # Either http or sse allowed\n    transport: TransportEnum = Field(\n        default=TransportEnum.http,\n        description=\"Transport protocol for MCP, either 'http' or 'sse'.\",\n    )\n</code></pre>"},{"location":"modules/#apiminio.main.MinioConfig","title":"<code>MinioConfig</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Configuration model for Minio client.</p> Source code in <code>src/apiminio/main.py</code> <pre><code>class MinioConfig(BaseModel):\n    \"\"\"Configuration model for Minio client.\"\"\"\n\n    endpoint: str = os.getenv(\"MINIO_ENDPOINT\", \"minio:9000\")\n    access_key: str = os.getenv(\"MINIO_ACCESS_KEY\", \"minioadmin\")\n    secret_key: SecretStr = SecretStr(os.getenv(\"MINIO_SECRET_KEY\", \"minioadmin\"))\n    secure: bool = bool(int(os.getenv(\"MINIO_SECURE\", \"0\")))\n</code></pre>"},{"location":"modules/#apiminio.main.TransportEnum","title":"<code>TransportEnum</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Enum for MCP transport protocols.</p> Source code in <code>src/apiminio/main.py</code> <pre><code>class TransportEnum(str, Enum):\n    \"\"\"Enum for MCP transport protocols.\"\"\"\n\n    http = \"http\"\n    sse = \"sse\"\n</code></pre>"}]}